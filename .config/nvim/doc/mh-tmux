*mh-tmux*

A help to help me get some help every time I forget how to do something.

Note: run `:helptags ~/.config/nvim/doc/` to generate tags for this help.


================================================================================
CONTENTS                                                        *myhelp-contents*

  HELP ....................................... |myhelp-help|
  MAPPINGS ................................... |myhelp-mappings|
  SETTINGS ................................... |myhelp-settings|
  TERMINAL MODE .............................. |myhelp-terminal-mode|
  DEBUGGING VIM ISSUES ....................... |myhelp-debugging-vim-issues|
  REGISTERS .................................. |myhelp-registers|
  MOVING AROUND (NORMAL MODE) ................ |myhelp-moving-around|
  VIMDIFF MODE ............................... |myhelp-diff-mode|
  EDITING .................................... |myhelp-editing|


================================================================================
HELP                                                                *myhelp-help*

Type `:help` in command mode to access the help of `help` command

Sometimes you want to know what a particular control key means in Vim. For
example, to see all help topics containing `ctrl-r`, type `:h ctrl-r` then press
`<c-D>`

`K` Run a program to lookup the word under the cursor (normal mode)

`g<c-g>` show some statistics of the current buffer (normal mode)

`:set fileformat?` show what's the file format of current buffer (unix, dos, mac)
`$ vim -b` to open vim in binary format (text files will show CR characters)
`:e ++ff=unix` to edit a file in unix format (will also show CR characters
`:set list` will show hidden characters
`:set listchars?` shows what chars to show, when `list` is set, for each hidden char (like `\n`, tab, etc.)


================================================================================
MAPPINGS                                                        *myhelp-mappings*

If you want to check the mapped keys:

`:map`        List all mappings done via `:map`, `:nmap`, `:cmap`, etc.

`:help index` List all default mappings

Typically, `:map` will span several pages. You can use the following commands
to redirect the output to a file:
>
  :redir! > /tmp/map.txt
  :map
  :map!
  :redir END
<


================================================================================
SETTINGS                                                        *myhelp-settings*

Turn boolean settings off by adding a `no` as a prefix.
Example: `set noexpandtab`

Toggle your settings in vim by adding a `!` as a suffix.
Example: `set expandtab!`

Check a setting in vim by adding a `?` as a suffix.
Example: `set expandtab?`

Set numerical values with an `=n` suffix.
Example: `set tabstop=8`


================================================================================
TERMINAL MODE                                              *myhelp-terminal-mode*

To start a terminal in the current window `:terminal`. Then:
  - `i` to enter terminal mode
  - `<c-\><c-n>` to exit terminal mode


================================================================================
DEBUGGING VIM ISSUES                                *myhelp-debugging-vim-issues*

`:messages`             View previously given messages. This is especially
                      useful when messages have been overwritten or truncated.

`:echo errmsg`          Prints the most recent error message.

`g<`                    The "g<" command can be used to see the last page of
                      previous command output. This is especially useful if you
                      accidentally typed <Space> at the hit-enter prompt.

`:checkhealth`          Run all healthchecks.

`:checkhealth` {plugins}
                      Run healthcheck(s) for one or more plugins. E.g. to run
                      only the standard Nvim healthcheck:
                        `:checkhealth nvim`
                      To run the healthchecks for the "foo" and "bar" plugins
                      (assuming these plugins are on your 'runtimepath' and
                      they have implemented health#foo#check() and
                      health#bar#check(), respectively):
                        `:checkhealth foo bar`

`$ vim -V[N][file]`     Open vim in verbose mode and save logs to `[file]`
                      Example:
                        `$ vim -V9/tmp/myvim.log`

`$ vim --noplugin`      Open vim loading vimrc file but disabling plugins

`$ vim -u NONE`         Open vim disabling vimrc file and plugins

`$ vim -R`              Open vim in readonly mode

`$ tail -f ~/.cache/nvim/lsp.log`
                        For LSP related issues

`$ vim -b`              Open vim in binary mode (you can see all invisible chars in a text file for example)


================================================================================
REGISTERS                                                      *myhelp-registers*

- `<c-r>a` paste the content of register `a` (insert and command mode)
- `:let @/='Text'`  write `'Text'` to register `/` 
- `"kyy` copy the current line to register `k` (normal mode)
- `"Kyy` append the current line to register `k` - normal mode_


================================================================================
MOVING AROUND (NORMAL MODE)                                *myhelp-moving-around*

Working with marks:
  - `mx` set mark `x` at the current cursor position
  - `'x` jump to the beginning of the line of mark `x`
  - ``x` jump to the cursor position of mark `x`

Searching:
  - `*` search forward for the word under cursor (`g*` for non-exact word)
  - `#` search backward for the word under cursor (`g#` for non-exact word)

General moves:
  - `e` move to the end of a word
  - `w` move forward to the beginning of a word
  - `3w` move forward three words
  - `W` move forward a WORD (any non-whitespace characters)
  - `b` move backward to the beginning of a word
  - `3b` move backward three words
  - `$` move to the end of the line
  - `0` move to the beginning of the line
  - `^` move to the first non-blank character of the line
  - `)` jump forward one sentence
  - `(` jump backward one sentence
  - `}` jump forward one paragraph
  - `{` jump backward one paragraph
  - `H` jump to the top of the screen
  - `M` jump to the middle of the screen
  - `L` jump to the bottom of the screen
  - `10<c-b>` move 10 pages up
  - `10<c-d>` move 10 pages down
  - `5<c-f>` move 5 pages down
  - `gg` jump to beginning of file
  - `G` jump to end of file
  - `50G` jump to line 50
  - `%` jump to corresponding item, e.g. from an open brace to its matching closing brace
  - `'.` jump to the last-changed line
  - `''` return to the line where the cursor was before the latest jump
  -` ``` return to the cursor position before the latest jump (two backticks)


================================================================================
VIMDIFF MODE                                                   *myhelp-diff-mode*

To do a diff between two buffers first split the window into two and put each
buffer in one of them. Execute `:diffthis` in each buffer

To do a diff between a buffer and a file, with the buffer in a window open the
file using `:diffsplit` {path}. Go back to the buffer window and execute
`:diffthis`

Move between changes:
  - `[c` jump backwards to the previous change
  - `]c` jump forward to the next change


================================================================================
EDITING                                                          *myhelp-editing*

- `:3,15move 40` move the content of lines 3 through 15 to bellow line 40 (command mode)
- `:3,15copy 40` _Copy the content of lines 3 through 15 to bellow line 40 (command mode)
- `/` or `:` then `<c-r><c-w>` copy word under cursor to command line (normal mode)
- `@:` repeat the last command entered with `:`. Further repeats can be done with `@@` 



# tmux shortcuts & cheatsheet

start new:

    tmux

start new with session name:

    tmux new -s myname

attach:

    tmux a  #  (or at, or attach)

attach to named:

    tmux a -t myname

list sessions:

    tmux ls

<a name="killSessions"></a>kill session:

    tmux kill-session -t myname

<a name="killAllSessions"></a>Kill all the tmux sessions:

    tmux ls | grep : | cut -d. -f1 | awk '{print substr($1, 0, length($1)-1)}' | xargs kill

In tmux, hit the prefix `ctrl+b` (my modified prefix is ctrl+a) and then:

## List all shortcuts
to see all the shortcuts keys in tmux simply use the `bind-key ?` in my case that would be `CTRL-B ?`

## Sessions

    :new<CR>  new session
    s  list sessions
    $  name session

## <a name="WindowsTabs"></a>Windows (tabs)

    c  create window
    w  list windows
    n  next window
    p  previous window
    f  find window
    ,  name window
    &  kill window

## <a name="PanesSplits"></a>Panes (splits) 

    %  vertical split
    "  horizontal split
    
    o  swap panes
    q  show pane numbers
    x  kill pane
    +  break pane into window (e.g. to select text by mouse to copy)
    -  restore pane from window
    ⍽  space - toggle between layouts
    <prefix> q (Show pane numbers, when the numbers show up type the key to goto that pane)
    <prefix> { (Move the current pane left)
    <prefix> } (Move the current pane right)
    <prefix> z toggle pane zoom

## <a name="syncPanes"></a>Sync Panes 

You can do this by switching to the appropriate window, typing your Tmux prefix (commonly Ctrl-B or Ctrl-A) and then a colon to bring up a Tmux command line, and typing:

```
:setw synchronize-panes
```

You can optionally add on or off to specify which state you want; otherwise the option is simply toggled. This option is specific to one window, so it won’t change the way your other sessions or windows operate. When you’re done, toggle it off again by repeating the command. [tip source](http://blog.sanctum.geek.nz/sync-tmux-panes/)


## Resizing Panes

You can also resize panes if you don’t like the layout defaults. I personally rarely need to do this, though it’s handy to know how. Here is the basic syntax to resize panes:

    PREFIX : resize-pane -D (Resizes the current pane down)
    PREFIX : resize-pane -U (Resizes the current pane upward)
    PREFIX : resize-pane -L (Resizes the current pane left)
    PREFIX : resize-pane -R (Resizes the current pane right)
    PREFIX : resize-pane -D 20 (Resizes the current pane down by 20 cells)
    PREFIX : resize-pane -U 20 (Resizes the current pane upward by 20 cells)
    PREFIX : resize-pane -L 20 (Resizes the current pane left by 20 cells)
    PREFIX : resize-pane -R 20 (Resizes the current pane right by 20 cells)
    PREFIX : resize-pane -t 2 20 (Resizes the pane with the id of 2 down by 20 cells)
    PREFIX : resize-pane -t -L 20 (Resizes the pane with the id of 2 left by 20 cells)
    
    
## Copy mode:

Pressing PREFIX [ places us in Copy mode. We can then use our movement keys to move our cursor around the screen. By default, the arrow keys work. we set our configuration file to use Vim keys for moving between windows and resizing panes so we wouldn’t have to take our hands off the home row. tmux has a vi mode for working with the buffer as well. To enable it, add this line to .tmux.conf:

    setw -g mode-keys vi

With this option set, we can use h, j, k, and l to move around our buffer.

To get out of Copy mode, we just press the ENTER key. Moving around one character at a time isn’t very efficient. Since we enabled vi mode, we can also use some other visible shortcuts to move around the buffer.

For example, we can use "w" to jump to the next word and "b" to jump back one word. And we can use "f", followed by any character, to jump to that character on the same line, and "F" to jump backwards on the line.

       Function                vi             emacs
       Back to indentation     ^              M-m
       Clear selection         Escape         C-g
       Copy selection          Enter          M-w
       Cursor down             j              Down
       Cursor left             h              Left
       Cursor right            l              Right
       Cursor to bottom line   L
       Cursor to middle line   M              M-r
       Cursor to top line      H              M-R
       Cursor up               k              Up
       Delete entire line      d              C-u
       Delete to end of line   D              C-k
       End of line             $              C-e
       Goto line               :              g
       Half page down          C-d            M-Down
       Half page up            C-u            M-Up
       Next page               C-f            Page down
       Next word               w              M-f
       Paste buffer            p              C-y
       Previous page           C-b            Page up
       Previous word           b              M-b
       Quit mode               q              Escape
       Scroll down             C-Down or J    C-Down
       Scroll up               C-Up or K      C-Up
       Search again            n              n
       Search backward         ?              C-r
       Search forward          /              C-s
       Start of line           0              C-a
       Start selection         Space          C-Space
       Transpose chars                        C-t

## Misc

    d  detach
    t  big clock
    ?  list shortcuts
    :  prompt

## Configurations Options:

    # Mouse support - set to on if you want to use the mouse
    * setw -g mode-mouse off
    * set -g mouse-select-pane off
    * set -g mouse-resize-pane off
    * set -g mouse-select-window off

    # Set the default terminal mode to 256color mode
    set -g default-terminal "screen-256color"

    # enable activity alerts
    setw -g monitor-activity on
    set -g visual-activity on

    # Center the window list
    set -g status-justify centre

    # Maximize and restore a pane
    unbind Up bind Up new-window -d -n tmp \; swap-pane -s tmp.1 \; select-window -t tmp
    unbind Down
    bind Down last-window \; swap-pane -s tmp.1 \; kill-window -t tmp

## Resources:

* [tmux: Productive Mouse-Free Development](http://pragprog.com/book/bhtmux/tmux)
* [How to reorder windows](http://superuser.com/questions/343572/tmux-how-do-i-reorder-my-windows)

## Notes:

* 

## Changelog:

* 1411143833002 - Added [toggle zoom](#PanesSplits) under Panes (splits) section.
* 1411143833002 - [Added Sync Panes](#syncPanes)
* 1414276652677 - [Added Kill all tmux sessions ](#killAllSessions)
* 1438585211173 - [corrected create and add next and previus thanks to @justinjhendrick](#WindowsTabs)
 
## Request an Update:

We Noticed that our Cheatsheet is growing and people are coloberating to add new tips and tricks, so please tweet to me what would you like to add and let's make it better!

* Twitter: [@MohammedAlaa](http://twitter.com/MohammedAlaa)

